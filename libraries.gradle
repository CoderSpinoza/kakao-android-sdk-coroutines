apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.2"
}

android {
    compileSdkVersion project.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode project.ext.versionCode
        versionName project.ext.versionName

//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }
}

dependencies {
    implementation "androidx.appcompat:appcompat:1.0.2"
    implementation "androidx.annotation:annotation:1.0.1"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"

    api 'com.squareup.retrofit2:retrofit:2.5.1-SNAPSHOT'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.1-SNAPSHOT'
//    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2" // will be removed with next version of retrofit (2.6.0)

    // below are test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.1.1'
    testImplementation 'org.robolectric:robolectric:4.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.13.1'
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation 'org.mockito:mockito-inline:2.9.0'
    testImplementation "androidx.test:core:1.1.0"
    testImplementation 'androidx.test:runner:1.1.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.1'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.1.1'
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group "Reporting"
    description "Generate Jacoco coverage reports."

    reports {
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def execution = fileTree(dir: project.buildDir,
            includes: ['jacoco/testDebugUnitTest.exec',
                       'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'])

    afterEvaluate {
        def javaClasses = fileTree(dir: compileDebugJavaWithJavac.destinationDir, excludes: fileFilter)
        def kotlinClasses = fileTree(dir: compileDebugKotlin.destinationDir, excludes: fileFilter)
        classDirectories.setFrom(files(javaClasses, kotlinClasses))
    }
    executionData.setFrom(files(execution))

    doLast() {
        print "file://${reports.html.destination}/index.html"
    }
}